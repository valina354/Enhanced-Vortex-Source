#include "common_ps_fxc.h"

sampler PointSampler0	: register( s0 ); //frontbuffer

const float fTexScale	: register( c0 );
const float fBlurScale	: register( c1 );
const float2 g_vSourceDimensions	: register( c2 );
const float4 vTint		: register( c3 );
const float	fThreshold	: register( c4 );

const static int NumSamples = 12;

float4 main(float2 in_vTexCoord    : TEXCOORD0) : COLOR
{
	// The flare should appear on the opposite side of the screen as the
	// source of the light, so first we mirror the texture coordinate.
	// Then we normalize so we can apply a scaling factor.
	float2 vMirrorCoord = float2(1.0f, 1.0f) - in_vTexCoord;
	float2 vNormalizedCoord = vMirrorCoord * 2.0f - 1.0f;
	vNormalizedCoord *= fTexScale;

	// We'll blur towards the center of screen, and also away from it.
	float2 vTowardCenter = normalize(-vNormalizedCoord);
	float2 fBlurDist = fBlurScale * NumSamples;
	float2 vStartPoint = vNormalizedCoord + ((vTowardCenter / g_vSourceDimensions) * fBlurDist);
	float2 vStep = -(vTowardCenter / g_vSourceDimensions) * 2 * fBlurDist;

	// Do the blur and sum the samples
	float4 vSum = 0;
	float2 vSamplePos = vStartPoint;
	for (int i = 0; i < NumSamples; i++)
	{
		float2 vSampleTexCoord = vSamplePos * 0.5f + 0.5f;

		// Don't add in samples past texture border
		if (vSampleTexCoord.x >= 0 && vSampleTexCoord.x <= 1.0f
			&& vSampleTexCoord.y >=0 && vSampleTexCoord.y <= 1.0f)\
		{
			float4 vSample = tex2D(PointSampler0, vSampleTexCoord);
			vSum +=  max(0, vSample - fThreshold) * vTint;
		}

		vSamplePos += vStep;
	}

	return vSum / NumSamples;
}