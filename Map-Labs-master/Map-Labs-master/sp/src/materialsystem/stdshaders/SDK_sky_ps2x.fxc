// HDRFIXME: Make this work with nonHDR
// STATIC: "CONVERT_TO_SRGB"			"0..1"	[ps20b][= g_pHardwareConfig->NeedsShaderSRGBConversion()] [PC]
// STATIC: "CONVERT_TO_SRGB"			"0..0"	[= 0] [XBOX]
// STATIC: "USES_TEXTURE_BLENDS"		"0..1"
// STATIC: "HAS_BLEND1"					"0..1"
// STATIC: "HAS_BLEND2"					"0..1"
// STATIC: "HAS_BLEND3"					"0..1"
// STATIC: "HAS_BLEND4"					"0..1"
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"	"0..1"	[ps20b] [PC]
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"	"0..0"	[ps20b] [XBOX]

// SKIP: ( !$USES_TEXTURE_BLENDS ) && ( $HAS_BLEND1 )
// SKIP: ( !$USES_TEXTURE_BLENDS ) && ( $HAS_BLEND2 )
// SKIP: ( !$USES_TEXTURE_BLENDS ) && ( $HAS_BLEND3 )
// SKIP: ( !$USES_TEXTURE_BLENDS ) && ( $HAS_BLEND4 )

#include "common_ps_fxc.h"

#if defined( SHADER_MODEL_PS_2_0 )
#	define WRITE_DEPTH_TO_DESTALPHA 0
#endif

sampler BaseTextureSampler	: register( s0 );
HALF4 InputScale			: register( c0 );

#if USES_TEXTURE_BLENDS
const float4 g_TextureBlends	: register( c1 );
#endif

#if HAS_BLEND2
sampler BaseTexture2Sampler	: register( s1 );
#endif
#if HAS_BLEND3
sampler BaseTexture3Sampler	: register( s2 );
#endif
#if HAS_BLEND4
sampler BaseTexture4Sampler	: register( s3 );
#endif

struct PS_INPUT
{
	float2 baseTexCoord		: TEXCOORD0;
};

float4 main( PS_INPUT i ) : COLOR
{
#if USES_TEXTURE_BLENDS
	HALF4 color = {0,0,0,0};

#if HAS_BLEND1
	color = lerp( color, tex2D( BaseTextureSampler, i.baseTexCoord.xy ), g_TextureBlends[0] );
#endif
#if HAS_BLEND2
	color = lerp( color, tex2D( BaseTexture2Sampler, i.baseTexCoord.xy ), g_TextureBlends[1] );
#endif
#if HAS_BLEND3
	color = lerp( color, tex2D( BaseTexture3Sampler, i.baseTexCoord.xy ), g_TextureBlends[2] );
#endif
#if HAS_BLEND4
	color = lerp( color, tex2D( BaseTexture4Sampler, i.baseTexCoord.xy ), g_TextureBlends[3] );
#endif

#else
	HALF4 color = tex2D( BaseTextureSampler, i.baseTexCoord.xy );
#endif
	color.rgb *= InputScale.rgb;

	// This is never fogged.
	return FinalOutput( color, 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_LINEAR, WRITE_DEPTH_TO_DESTALPHA, 1e20 ); //when writing depth to dest alpha, write a value guaranteed to saturate
}